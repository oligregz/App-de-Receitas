{"ast":null,"code":"var _jsxFileName = \"/home/gregory/projetos/sd-016-a-project-recipes-app/src/components/IngredientsCheck/IngredientsCheck.js\";\nimport React from 'react';\nimport PropTypes, { string } from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IngredientsCheck(_ref) {\n  let {\n    ingredients,\n    measures,\n    handleChange,\n    checkboxList\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ingredients.map((ingredient, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        \"data-testid\": `${i}-ingredient-step`,\n        children: [`${ingredient} - ${measures[i]}`, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: ingredient,\n          onChange: handleChange,\n          checked: Object.values(checkboxList)[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n_c = IngredientsCheck;\nIngredientsCheck.propTypes = {\n  ingredients: PropTypes.arrayOf(PropTypes.string).isRequired,\n  measures: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleChange: PropTypes.func.isRequired,\n  checkboxList: PropTypes.objectOf(string).isRequired\n};\nexport default IngredientsCheck;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientsCheck\");","map":{"version":3,"sources":["/home/gregory/projetos/sd-016-a-project-recipes-app/src/components/IngredientsCheck/IngredientsCheck.js"],"names":["React","PropTypes","string","IngredientsCheck","ingredients","measures","handleChange","checkboxList","map","ingredient","i","Object","values","propTypes","arrayOf","isRequired","func","objectOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,IAAoBC,MAApB,QAAkC,YAAlC;;;AAEA,SAASC,gBAAT,OAAiF;AAAA,MAAvD;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA,YAAzB;AAAuCC,IAAAA;AAAvC,GAAuD;AAC/E,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACIH,WAAW,CAACI,GAAZ,CAAgB,CAACC,UAAD,EAAaC,CAAb,kBAChB;AACE,uBAAe,GAAEA,CAAE,kBADrB;AAAA,mBAII,GAAED,UAAW,MAAKJ,QAAQ,CAACK,CAAD,CAAI,EAJlC,eAKE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,IAAI,EAAGD,UAFT;AAGE,UAAA,QAAQ,EAAGH,YAHb;AAIE,UAAA,OAAO,EAAGK,MAAM,CAACC,MAAP,CAAcL,YAAd,EAA4BG,CAA5B;AAJZ;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA,SAEQA,CAFR;AAAA;AAAA;AAAA;AAAA,cADA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;KAtBQP,gB;AAwBTA,gBAAgB,CAACU,SAAjB,GAA6B;AAC3BT,EAAAA,WAAW,EAAEH,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACC,MAA5B,EAAoCa,UADtB;AAE3BV,EAAAA,QAAQ,EAAEJ,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACC,MAA5B,EAAoCa,UAFnB;AAG3BT,EAAAA,YAAY,EAAEL,SAAS,CAACe,IAAV,CAAeD,UAHF;AAI3BR,EAAAA,YAAY,EAAEN,SAAS,CAACgB,QAAV,CAAmBf,MAAnB,EAA2Ba;AAJd,CAA7B;AAOA,eAAeZ,gBAAf","sourcesContent":["import React from 'react';\nimport PropTypes, { string } from 'prop-types';\n\nfunction IngredientsCheck({ ingredients, measures, handleChange, checkboxList }) {\n  return (\n    <div>\n      <h3>Ingredients</h3>\n      <ul>\n        { ingredients.map((ingredient, i) => (\n          <li\n            data-testid={ `${i}-ingredient-step` }\n            key={ i }\n          >\n            {`${ingredient} - ${measures[i]}`}\n            <input\n              type=\"checkbox\"\n              name={ ingredient }\n              onChange={ handleChange }\n              checked={ Object.values(checkboxList)[i] }\n            />\n          </li>\n        )) }\n      </ul>\n    </div>\n  );\n}\n\nIngredientsCheck.propTypes = {\n  ingredients: PropTypes.arrayOf(PropTypes.string).isRequired,\n  measures: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleChange: PropTypes.func.isRequired,\n  checkboxList: PropTypes.objectOf(string).isRequired,\n};\n\nexport default IngredientsCheck;\n"]},"metadata":{},"sourceType":"module"}