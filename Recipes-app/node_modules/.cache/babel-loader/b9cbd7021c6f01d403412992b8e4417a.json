{"ast":null,"code":"var _jsxFileName = \"/home/gregory/projetos/sd-016-a-project-recipes-app/src/pages/progressDrinks/ProgressDrinks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport fetchAPI from '../../services/fetchAPI';\nimport IngredientsCheck from '../../components/IngredientsCheck/IngredientsCheck';\nimport GlobalContext from '../../context/GlobalContext';\nimport { filterIngredientsFunc, filterMeasuresFunc } from '../detailDrinks/FuncDetailDrinks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProgressDrinks(_ref) {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const [returnAPIDrink, setReturnAPIDrink] = useState('');\n  const [checkboxList, setCheckboxList] = useState({});\n  const {\n    handleRecipeStarted\n  } = useContext(GlobalContext);\n  const {\n    params: {\n      id\n    }\n  } = match;\n  useEffect(() => {\n    const returnFetchApi = async () => {\n      const result = await fetchAPI('fetchCocktailById', id);\n      setReturnAPIDrink(result);\n    };\n\n    returnFetchApi();\n  }, [id]);\n  useEffect(() => {\n    const ingredientListCreator = async () => {\n      const result = await fetchAPI('fetchCocktailById', id);\n      const getRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n      const ingredientList = filterIngredientsFunc(result);\n\n      if (!getRecipes || Object.keys(getRecipes.cocktails[id]).length === 0) {\n        const state = ingredientList.reduce((obj, ingredient) => ({ ...obj,\n          [ingredient]: false\n        }), {});\n        setCheckboxList(state);\n        handleRecipeStarted(result.drinks[0], state);\n      } else {\n        setCheckboxList(getRecipes.cocktails[id]);\n      }\n    };\n\n    ingredientListCreator();\n  }, []);\n  const history = useHistory();\n\n  function redirectFinish() {\n    history.push('/done-recipes');\n  }\n\n  const handleChangeCheckBox = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const getRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    const ingredientList = getRecipes.cocktails[id];\n    const obj = { ...ingredientList,\n      [target.name]: value\n    };\n    setCheckboxList(obj);\n    handleRecipeStarted(returnAPIDrink.drinks[0], obj);\n  };\n\n  const finishRecipeIsDisabled = () => Object.values(checkboxList).every(ingredient => ingredient);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: returnAPIDrink && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Drinks in Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        \"data-testid\": \"recipe-photo\",\n        alt: \"Img\",\n        src: returnAPIDrink.drinks[0].strDrinkThumb,\n        width: \"200px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        \"data-testid\": \"recipe-title\",\n        children: returnAPIDrink.drinks[0].strDrink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        \"data-testid\": \"recipe-category\",\n        children: returnAPIDrink.drinks[0].strAlcoholic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"share-btn\",\n        children: \"Share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"favorite-btn\",\n        children: \"Favorite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        \"data-testid\": \"instructions\",\n        children: returnAPIDrink.drinks[0].strInstructions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), Object.values(checkboxList).length > 0 && /*#__PURE__*/_jsxDEV(IngredientsCheck, {\n        ingredients: filterIngredientsFunc(returnAPIDrink),\n        measures: filterMeasuresFunc(returnAPIDrink),\n        handleChange: handleChangeCheckBox,\n        checkboxList: checkboxList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"finish-recipe-btn\",\n        className: \"finish-drink-btn\",\n        onClick: () => redirectFinish(),\n        disabled: !finishRecipeIsDisabled(),\n        children: \"Finish Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProgressDrinks, \"HOacC9JJSFjja2mv6gERY66d1NI=\", false, function () {\n  return [useHistory];\n});\n\n_c = ProgressDrinks;\nProgressDrinks.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  })\n};\nProgressDrinks.defaultProps = {\n  match: {}\n};\nexport default ProgressDrinks;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressDrinks\");","map":{"version":3,"sources":["/home/gregory/projetos/sd-016-a-project-recipes-app/src/pages/progressDrinks/ProgressDrinks.js"],"names":["React","useState","useEffect","useContext","PropTypes","useHistory","fetchAPI","IngredientsCheck","GlobalContext","filterIngredientsFunc","filterMeasuresFunc","ProgressDrinks","match","returnAPIDrink","setReturnAPIDrink","checkboxList","setCheckboxList","handleRecipeStarted","params","id","returnFetchApi","result","ingredientListCreator","getRecipes","JSON","parse","localStorage","getItem","ingredientList","Object","keys","cocktails","length","state","reduce","obj","ingredient","drinks","history","redirectFinish","push","handleChangeCheckBox","target","value","type","checked","name","finishRecipeIsDisabled","values","every","strDrinkThumb","strDrink","strAlcoholic","strInstructions","propTypes","shape","string","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,gBAAP,MAA6B,oDAA7B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AAEA,SACEC,qBADF,EAEEC,kBAFF,QAGO,kCAHP;;;AAKA,SAASC,cAAT,OAAmC;AAAA;;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AACjC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AACJgB,IAAAA;AADI,MAEFd,UAAU,CAACK,aAAD,CAFd;AAIA,QAAM;AAAEU,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,MAAqBP,KAA3B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,cAAc,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAMf,QAAQ,CAAC,mBAAD,EAAsBa,EAAtB,CAA7B;AACAL,MAAAA,iBAAiB,CAACO,MAAD,CAAjB;AACD,KAHD;;AAIAD,IAAAA,cAAc;AACf,GANQ,EAMN,CAACD,EAAD,CANM,CAAT;AAQAjB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,qBAAqB,GAAG,YAAY;AACxC,YAAMD,MAAM,GAAG,MAAMf,QAAQ,CAAC,mBAAD,EAAsBa,EAAtB,CAA7B;AACA,YAAMI,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAAnB;AACA,YAAMC,cAAc,GAAGnB,qBAAqB,CAACY,MAAD,CAA5C;;AACA,UAAI,CAACE,UAAD,IAAeM,MAAM,CAACC,IAAP,CAAYP,UAAU,CAACQ,SAAX,CAAqBZ,EAArB,CAAZ,EAAsCa,MAAtC,KAAiD,CAApE,EAAuE;AACrE,cAAMC,KAAK,GAAGL,cAAc,CAACM,MAAf,CAAsB,CAACC,GAAD,EAAMC,UAAN,MAAsB,EACxD,GAAGD,GADqD;AAExD,WAACC,UAAD,GAAc;AAF0C,SAAtB,CAAtB,EAGV,EAHU,CAAd;AAIApB,QAAAA,eAAe,CAACiB,KAAD,CAAf;AACAhB,QAAAA,mBAAmB,CAACI,MAAM,CAACgB,MAAP,CAAc,CAAd,CAAD,EAAmBJ,KAAnB,CAAnB;AACD,OAPD,MAOO;AACLjB,QAAAA,eAAe,CAACO,UAAU,CAACQ,SAAX,CAAqBZ,EAArB,CAAD,CAAf;AACD;AACF,KAdD;;AAeAG,IAAAA,qBAAqB;AACtB,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,QAAMgB,OAAO,GAAGjC,UAAU,EAA1B;;AACA,WAASkC,cAAT,GAA0B;AACxBD,IAAAA,OAAO,CAACE,IAAR,CAAa,eAAb;AACD;;AAED,QAAMC,oBAAoB,GAAG,SAAgB;AAAA,QAAf;AAAEC,MAAAA;AAAF,KAAe;AAC3C,UAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,KAAgB,UAAhB,GAA6BF,MAAM,CAACG,OAApC,GAA8CH,MAAM,CAACC,KAAnE;AACA,UAAMpB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAAnB;AACA,UAAMC,cAAc,GAAGL,UAAU,CAACQ,SAAX,CAAqBZ,EAArB,CAAvB;AACA,UAAMgB,GAAG,GAAG,EACV,GAAGP,cADO;AAEV,OAACc,MAAM,CAACI,IAAR,GAAeH;AAFL,KAAZ;AAIA3B,IAAAA,eAAe,CAACmB,GAAD,CAAf;AACAlB,IAAAA,mBAAmB,CAACJ,cAAc,CAACwB,MAAf,CAAsB,CAAtB,CAAD,EAA2BF,GAA3B,CAAnB;AACD,GAVD;;AAYA,QAAMY,sBAAsB,GAAG,MAAMlB,MAAM,CAACmB,MAAP,CAAcjC,YAAd,EAClCkC,KADkC,CAC3Bb,UAAD,IAAgBA,UADY,CAArC;;AAGA,sBACE;AAAA,cAEIvB,cAAc,iBAEZ;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,uBAAY,cADd;AAEE,QAAA,GAAG,EAAC,KAFN;AAGE,QAAA,GAAG,EAAGA,cAAc,CAACwB,MAAf,CAAsB,CAAtB,EAAyBa,aAHjC;AAIE,QAAA,KAAK,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE;AAAI,uBAAY,cAAhB;AAAA,kBAAgCrC,cAAc,CAACwB,MAAf,CAAsB,CAAtB,EAAyBc;AAAzD;AAAA;AAAA;AAAA;AAAA,cARF,eAUE;AAAI,uBAAY,iBAAhB;AAAA,kBAAmCtC,cAAc,CAACwB,MAAf,CAAsB,CAAtB,EAAyBe;AAA5D;AAAA;AAAA;AAAA;AAAA,cAVF,eAYE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,uBAAY,WAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAmBE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,uBAAY,cAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eA0BE;AAAG,uBAAY,cAAf;AAAA,kBAA+BvC,cAAc,CAACwB,MAAf,CAAsB,CAAtB,EAAyBgB;AAAxD;AAAA;AAAA;AAAA;AAAA,cA1BF,EA4BGxB,MAAM,CAACmB,MAAP,CAAcjC,YAAd,EAA4BiB,MAA5B,GAAqC,CAArC,iBACC,QAAC,gBAAD;AACE,QAAA,WAAW,EAAGvB,qBAAqB,CAACI,cAAD,CADrC;AAEE,QAAA,QAAQ,EAAGH,kBAAkB,CAACG,cAAD,CAF/B;AAGE,QAAA,YAAY,EAAG4B,oBAHjB;AAIE,QAAA,YAAY,EAAG1B;AAJjB;AAAA;AAAA;AAAA;AAAA,cA7BJ,eAqCE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,uBAAY,mBAFd;AAGE,QAAA,SAAS,EAAC,kBAHZ;AAIE,QAAA,OAAO,EAAG,MAAMwB,cAAc,EAJhC;AAKE,QAAA,QAAQ,EAAG,CAACQ,sBAAsB,EALpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJN;AAAA;AAAA;AAAA;AAAA,UADF;AAwDD;;GAhHQpC,c;UAoCSN,U;;;KApCTM,c;AAkHTA,cAAc,CAAC2C,SAAf,GAA2B;AACzB1C,EAAAA,KAAK,EAAER,SAAS,CAACmD,KAAV,CAAgB;AACrBrC,IAAAA,MAAM,EAAEd,SAAS,CAACmD,KAAV,CAAgB;AACtBpC,MAAAA,EAAE,EAAEf,SAAS,CAACoD;AADQ,KAAhB;AADa,GAAhB;AADkB,CAA3B;AAQA7C,cAAc,CAAC8C,YAAf,GAA8B;AAC5B7C,EAAAA,KAAK,EAAE;AADqB,CAA9B;AAIA,eAAeD,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport fetchAPI from '../../services/fetchAPI';\nimport IngredientsCheck from '../../components/IngredientsCheck/IngredientsCheck';\nimport GlobalContext from '../../context/GlobalContext';\n\nimport {\n  filterIngredientsFunc,\n  filterMeasuresFunc,\n} from '../detailDrinks/FuncDetailDrinks';\n\nfunction ProgressDrinks({ match }) {\n  const [returnAPIDrink, setReturnAPIDrink] = useState('');\n  const [checkboxList, setCheckboxList] = useState({});\n  const {\n    handleRecipeStarted,\n  } = useContext(GlobalContext);\n\n  const { params: { id } } = match;\n\n  useEffect(() => {\n    const returnFetchApi = async () => {\n      const result = await fetchAPI('fetchCocktailById', id);\n      setReturnAPIDrink(result);\n    };\n    returnFetchApi();\n  }, [id]);\n\n  useEffect(() => {\n    const ingredientListCreator = async () => {\n      const result = await fetchAPI('fetchCocktailById', id);\n      const getRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n      const ingredientList = filterIngredientsFunc(result);\n      if (!getRecipes || Object.keys(getRecipes.cocktails[id]).length === 0) {\n        const state = ingredientList.reduce((obj, ingredient) => ({\n          ...obj,\n          [ingredient]: false,\n        }), {});\n        setCheckboxList(state);\n        handleRecipeStarted(result.drinks[0], state);\n      } else {\n        setCheckboxList(getRecipes.cocktails[id]);\n      }\n    };\n    ingredientListCreator();\n  }, []);\n\n  const history = useHistory();\n  function redirectFinish() {\n    history.push('/done-recipes');\n  }\n\n  const handleChangeCheckBox = ({ target }) => {\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const getRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    const ingredientList = getRecipes.cocktails[id];\n    const obj = {\n      ...ingredientList,\n      [target.name]: value,\n    };\n    setCheckboxList(obj);\n    handleRecipeStarted(returnAPIDrink.drinks[0], obj);\n  };\n\n  const finishRecipeIsDisabled = () => Object.values(checkboxList)\n    .every((ingredient) => ingredient);\n\n  return (\n    <div>\n      {\n        returnAPIDrink\n        && (\n          <div>\n            <h2>Drinks in Progress</h2>\n            <img\n              data-testid=\"recipe-photo\"\n              alt=\"Img\"\n              src={ returnAPIDrink.drinks[0].strDrinkThumb }\n              width=\"200px\"\n            />\n            <h2 data-testid=\"recipe-title\">{returnAPIDrink.drinks[0].strDrink}</h2>\n\n            <h4 data-testid=\"recipe-category\">{returnAPIDrink.drinks[0].strAlcoholic}</h4>\n\n            <button\n              type=\"button\"\n              data-testid=\"share-btn\"\n            >\n              Share\n            </button>\n\n            <button\n              type=\"button\"\n              data-testid=\"favorite-btn\"\n            >\n              Favorite\n            </button>\n\n            <p data-testid=\"instructions\">{returnAPIDrink.drinks[0].strInstructions}</p>\n\n            {Object.values(checkboxList).length > 0 && (\n              <IngredientsCheck\n                ingredients={ filterIngredientsFunc(returnAPIDrink) }\n                measures={ filterMeasuresFunc(returnAPIDrink) }\n                handleChange={ handleChangeCheckBox }\n                checkboxList={ checkboxList }\n              />\n            )}\n\n            <button\n              type=\"button\"\n              data-testid=\"finish-recipe-btn\"\n              className=\"finish-drink-btn\"\n              onClick={ () => redirectFinish() }\n              disabled={ !finishRecipeIsDisabled() }\n            >\n              Finish Recipe\n            </button>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nProgressDrinks.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }),\n};\n\nProgressDrinks.defaultProps = {\n  match: {},\n};\n\nexport default ProgressDrinks;\n"]},"metadata":{},"sourceType":"module"}